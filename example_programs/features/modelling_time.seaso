# Unlike other languages (like eFLINT), statement order in Seaso has
# no affect on the results of inference.

# Time can instead be modelled "in the data".

# For example, "food cannot be sold after it is eaten"
defn time(int). before(time,time). food(str). 
defn sold_at(food,time). eaten_at(food,time).
defn sale_after_eat(food). 

rule before(X,Z) :- before(X,Y), before(Y,Z).
rule sale_after_eat(F) :- eaten_at(F,T1), before(T1,T2), sold_at(F,T2).

emit sale_after_eat. seal sale_after_eat.

# (deconstructor rules for convenience)
rule I :- time(I).
     S :- food(S).
     F :- sale_after_eat(F).
     T1, T2 :- before(T1,T2).
     F, T :- sold_at(F,T).
     F, T :- eaten_at(F,T).

# modelling a chronological scenario requires one to explicitly contextualise
# events by a time, and relate that time to other times. For example:

rule
sold_at(food("Spinach"),time(0)).
sold_at(food("Custard"),time(0)).

before(time(0),time(1)).

eaten_at(food("Spinach"),time(1)).
sold_at(food("Lettuce"),time(1)).

before(time(1),time(2)).

eaten_at(food("Lettuce"),time(2)).
sold_at(food("Carrot"),time(2)).

# As time is is independent from statement order, the order of events and
# the order in which rules are appended to the program are independent.

sold_at(food("Rice"),time(0)).

# As our model of time is user-defined, it is extensively customisable.
# For example, we delay the definition of ordering between time(2) and time(3).

before(time(1),time(3)).

sold_at(food("Leek"),time(3)).