part work: core, task-data {
  decl workflow.
  defn
    workflow-applicator(workflow,data).
    workflow-aggregator(workflow,data).
    workflow-data-provider(workflow,agent).
    workflow-data-consumer(workflow,agent).
    workflow-third-party(workflow,agent).
    workflow-aggregator-agent(workflow,agent).
    workflow-has-third-party(workflow).
    applicator-result(workflow,agent,data).
    aggregator-result(workflow,data).
  rule
    W, D :- workflow-applicator(W,D).
    W, D :- workflow-aggregator(W,D).
    W, A :- workflow-data-provider(W,A).
    W, A :- workflow-data-consumer(W,A).
    workflow-data-provider(W,A), W, A, D :- applicator-result(W,A,D).
    workflow-has-third-party(W), workflow-aggregator-agent(W,A), W, A 
    :- workflow-third-party(W,A).
    workflow-aggregator-agent(W,A), W, A
    :- !workflow-has-third-party(W), workflow-data-consumer(W,A).
}

part work-checks: work {
  defn 
    multiple-third-parties(workflow,agent,agent).
    applicator-result-collision(workflow,data,agent,agent).
  rule
    multiple-third-parties(W,A1,A2), A1, A2, W
    :- workflow-third-party(W,A1), workflow-third-party(W,A2), !agent-eq(A1,A2).
    applicator-result-collision(W,D,A1,A2) 
    :- applicator-result(W,A1,D), applicator-result(W,A2,D), !agent-eq(A1,A2).
  emit
    multiple-third-parties. applicator-result-collision.
  seal
    multiple-third-parties. applicator-result-collision.
    workflow-has-third-party. aggregator-result.
}