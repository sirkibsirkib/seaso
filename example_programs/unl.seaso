part entities {
  decl agent. data.
  defn agent_eq(agent,agent). data_eq(data,data).
  rule
    agent_eq(A,A) :- A.
    data_eq(D,D) :- D.
  seal agent_eq. data_eq.
}

part unl_plan: entities {
  defn in(data). out(data). seal in. out.
  defn
    plan(data). # identify by final resulting data
    plan_app(plan,data).
    plan_agg(plan,data).
    plan_input(plan,agent,in,out).
    plan_output(plan,agent).
    plan_third_party(plan,agent).
  rule
    D :- plan(D).
    P, D :- plan_app(P,D).
    P, D :- plan_agg(P,D).
    P, A, I, O :- plan_input(P,A,in(I),out(O)).
    P, A :- plan_output(P,A).
    P, A :- plan_third_party(P,A).
}

part concretize {
  defn agent(str). data(str).
}

part example {
  rule # (partial) plans
    plan_app(plan(data("res")), data("count-students")).
    plan_agg(plan(data("res")), data("sum-counts")).
    plan_input(plan(data("res")), agent("TUD"), in(data("TUD-in")), out(data("TUD-out"))).
    plan_input(plan(data("res")), agent("UvA"), in(data("UvA-in")), out(data("VU-out"))).
    plan_output(plan(data("res")), agent("VSNU")).
    plan_third_party(plan(data("res")), agent("SURF")).

    #trusts_with(A,D,agent("SURF")) :- ownership(A,D).
    #filters_sensitive(data("sum counts")).
}

part unl_plan_check: unl_plan {
  defn
    aggregator_party(plan,agent).
    plan_has_third_party(plan).
    input_collision(plan,in,agent,agent).
    multiple_third_parties(plan,agent,agent).
  rule
    plan_has_third_party(W) :- plan_third_party(W,A).
    input_collision(P,I,A1,A2) :- plan_input(P,A1,I,_), plan_input(P,A2,I,_), !agent_eq(A1,A2).
    multiple_third_parties(P,A1,A2) :- plan_third_party(P,A1), plan_third_party(P,A2), !agent_eq(A1,A2).
    aggregator_party(P,A) :- plan_output(P,A), !plan_has_third_party(P).
    aggregator_party(P,A) :- plan_third_party(P,A).
  emit input_collision. multiple_third_parties.
  seal plan_has_third_party. input_collision. multiple_third_parties. aggregator_party.
}

part info_flow: entities {
  defn info_flow(data,data). param(info_flow). func(info_flow).
  rule
    I :- param(I).
    I :- func(I).
  seal info_flow.
}

part unl_info_flow: unl_plan, info_flow {
  rule
    param(info_flow(D1,D2)) :- plan_input(P,_,in(D1),out(D2)).
    param(info_flow(D1,D2)) :- plan_input(plan(D2),_,_,out(D1)).
    func(info_flow(D1,D2)) :- plan_input(P,_,_,out(D2)), plan_app(P,D1).
    func(info_flow(D1,D2)) :- plan_agg(plan(D2),D1).
  seal func. param.
}

part reads: unl_plan {
  defn reads(agent,data).
  rule
    reads(A,D) :- plan_input(_,A,in(D),_).
    reads(A,D) :- plan_output(plan(D),A).
    reads(A,D) :- aggregator_party(P,A), plan_input(P,_,_,out(D)).
  seal reads.
}

part sensitive_info_flow: unl_info_flow {
  defn
    filters_sensitive(data).
    sensitive_info_flow(info_flow).
    some_func_not_filters_sensitive(data).
  rule
    D :- filters_sensitive(D).
    I :- sensitive_info_flow(I).
    some_func_not_filters_sensitive(D2) :- func(info_flow(D1,D2)), !filters_sensitive(D1).
    sensitive_info_flow(info_flow(D1,D2)) :- param(info_flow(D1,D2)), some_func_not_filters_sensitive(D2).
    sensitive_info_flow(info_flow(D1,D3))
    :- sensitive_info_flow(info_flow(D1,D2)), sensitive_info_flow(info_flow(D2,D3)).
  seal some_func_not_filters_sensitive. sensitive_info_flow.
}

part ownership {
  defn ownership(agent,data).
  rule ownership(A,D) :- plan_input(_,A,in(D),_).
  seal ownership.
}

part leak: sensitive_info_flow, ownership, reads {
  defn
    trusts_with(agent,data,agent).
    leak(agent,data,agent).
  rule
    A1, D, A2 :- trusts_with(A1,D,A2).
    leak(A1,D1,A2) :- ownership(A1,D1), sensitive_info_flow(info_flow(D1,D2)),
                      reads(A2,D2), !trusts_with(A1,D1,A2).
  emit leak. seal leak.
}

part search: example {
  seal plan_input. plan_agg. plan_app. plan_output. plan. agent. data. func. agent_eq. data_eq.
}

# dot -Kfdp -Tpng .\wop.dot -O