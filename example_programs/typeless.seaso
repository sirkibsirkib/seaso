< Motivating example: Formalize:
- Anything Amy says, Bob says.
- `if` atoms encode rules.
- `if` distributes over `says`.
Intuition:
- Circumvent the type system by packing predicate information into args.
- Encode sums as tagged products.
>

<
clingo can do this!
t(A,says,X) :- t(B,says,X), t(A,likes,B).
t(X,Y,Z) :- t(t(X,Y,Z),if,t(A,B,C)), t(A,B,C).
t(A,says,X) :- t(A,says,t(X,if,Y)), t(A,says,Y).

t(bob,says,a).
t(amy,says,t(b,if,a)).
t(bob,likes,amy).

:- not t(bob,says,b).

// Note: clingo makes no attempt to be terminating. This program crashes it:
f(f(X)) :- f(X).

// For some reason, clingo requires all literals to be inside relations
(silly because there's no meaningful type-safety, it seems!).
>