defn suc(int,int). decl item. 
defn next(item,item). items(). notFirst(item).
     notLast(item). idx(item,int). count(int).
rule I, J, notLast(I), notFirst(J) :- next(I,J).
     idx(I,0), items() :- I, !notFirst(I).
     idx(J,B) :- idx(I,A), next(I,J), suc(A,B).
     count(B) :- idx(I,A), !notLast(I), suc(A,B).
     count(0) :- !items().
seal items. notFirst. notLast. idx. count.

rule suc(0,1). suc(1,2). suc(2,3). suc(2,4).

defn item(str). rule next(item("X"),item("Y")).

defn eq(item,item). less(item,item).
     unordered(item,item). cylic(int).
rule    eq(I,I) :- I. 
      less(I,J) :- next(I,J).
      less(I,K) :- less(I,J), less(J,K).
       cylic(I) :- less(I,I).
 unordered(I,J) :- I, !less(I,J), !eq(I,J),
                   J, !less(J,I).
emit cylic. unordered.
seal cylic. unordered. eq. less.

#rule next(item("Z"),item("Z")).